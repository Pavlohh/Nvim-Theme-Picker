
#!/bin/bash

set -e

echo "Detecting OS..."

if command -v pacman &> /dev/null; then
  echo "Installing dependencies in Arch based system..."
  sudo pacman -Sy --noconfirm neovim git curl unzip
elif command -v apt &> /dev/null; then
  echo "Installing dependencies in Debian based system..."
  sudo apt update
  sudo apt install -y neovim git curl unzip
else
  echo "System is not supported. Install Neovim, Git, and Curl manually."
  exit 1
fi

# Backup if ~/.config/nvim exists
backup_nvim_config() {
  local backup_dir="$HOME/.config/nvim_backup-$(date +%Y%m%d-%H%M%S)"
  echo "~/.config/nvim already exists"
  read -p "Would you like to create a backup of existing config before overwriting? (y/N): " -r respuesta
  if [[ "$respuesta" =~ ^[YySs]$ ]]; then
    echo "Creating backup in: $backup_dir"
    mv ~/.config/nvim "$backup_dir"
  else
    echo "Overwriting existing configuration..."
    rm -rf ~/.config/nvim
  fi
}

if [ -d "$HOME/.config/nvim" ]; then
  backup_nvim_config
fi

echo "Building config structure..."
mkdir -p ~/.config/nvim/lua/plugins

# Clone Lazy.nvim safely
LZ_PATH="$HOME/.local/share/nvim/lazy/lazy.nvim"
echo "Cloning Lazy.nvim..."
if [ -d "$LZ_PATH" ]; then
  echo "[!] Lazy.nvim already exists. Removing old version..."
  rm -rf "$LZ_PATH"
fi
git clone --filter=blob:none https://github.com/folke/lazy.nvim.git "$LZ_PATH"

# Write init.lua
cat > ~/.config/nvim/init.lua <<'EOF'
vim.g.mapleader = " "

vim.opt.rtp:prepend(vim.fn.stdpath("data") .. "/lazy/lazy.nvim")
require("lazy").setup("plugins")

vim.g.colorscheme = "catppuccin"
vim.o.background = "dark"
vim.cmd.colorscheme(vim.g.colorscheme)

local themes = {
  "catppuccin",
  "gruvbox",
  "tokyonight",
  "everforest",
  "rose-pine",
}

local function apply_theme(theme)
  pcall(function()
    vim.o.background = "dark"
    vim.cmd.colorscheme(theme)
  end)
end

local function theme_picker()
  local pickers = require("telescope.pickers")
  local finders = require("telescope.finders")
  local actions = require("telescope.actions")
  local action_state = require("telescope.actions.state")
  local conf = require("telescope.config").values

  pickers.new({}, {
    prompt_title = "Select Theme",
    finder = finders.new_table({ results = themes }),
    sorter = conf.generic_sorter({}),
    attach_mappings = function(_, _)
      actions.select_default:replace(function()
        local selection = action_state.get_selected_entry()
        apply_theme(selection[1])
        vim.g.colorscheme = selection[1]
      end)
      return true
    end,
  }):find()
end

local function theme_preview()
  local pickers = require("telescope.pickers")
  local finders = require("telescope.finders")
  local actions = require("telescope.actions")
  local action_state = require("telescope.actions.state")
  local conf = require("telescope.config").values

  local current_theme = vim.g.colorscheme or "default"
  local last_previewed = current_theme

  local function restore_theme()
    vim.schedule(function()
      apply_theme(current_theme)
    end)
  end

  pickers.new({}, {
    prompt_title = "Preview Theme",
    finder = finders.new_table({ results = themes }),
    sorter = conf.generic_sorter({}),
    previewer = false,
    attach_mappings = function(prompt_bufnr, map)
      local close_and_restore = function()
        restore_theme()
        actions.close(prompt_bufnr)
      end

      actions.select_default:replace(function()
        local selection = action_state.get_selected_entry()
        apply_theme(selection[1])
        vim.g.colorscheme = selection[1]
        actions.close(prompt_bufnr)
      end)

      map("i", "<esc>", close_and_restore)
      map("n", "q", close_and_restore)
      map("n", "<esc>", close_and_restore)

      return true
    end,

    on_input_filter_cb = function(prompt)
      local entry = prompt and prompt:lower()
      for _, theme in ipairs(themes) do
        if entry == theme:sub(1, #entry) and theme ~= last_previewed then
          last_previewed = theme
          apply_theme(theme)
          break
        end
      end
      return prompt
    end,
  }):find()
end

vim.api.nvim_create_user_command("ThemePicker", theme_picker, {})
vim.api.nvim_create_user_command("ThemePreview", theme_preview, {})

vim.keymap.set("n", "<leader>ut", ":ThemePicker<CR>", { desc = "Cambiar tema sin preview" })
vim.keymap.set("n", "<leader>up", ":ThemePreview<CR>", { desc = "Previsualizar temas en vivo" })
EOF

# Write plugins/colors.lua
cat > ~/.config/nvim/lua/plugins/colors.lua <<'EOF'
return {
  {
    "catppuccin/nvim",
    name = "catppuccin",
    priority = 1000,
    lazy = false,
    config = function()
      require("catppuccin").setup({
        flavour = "mocha",
        transparent_background = true,
        integrations = {
          cmp = true,
          gitsigns = true,
          nvimtree = true,
          telescope = true,
          treesitter = true,
        },
      })
    end,
  },

  {
    "morhetz/gruvbox",
    priority = 1000,
    lazy = false,
  },

  {
    "folke/tokyonight.nvim",
    priority = 1000,
    lazy = false,
  },

  {
    "sainnhe/everforest",
    priority = 1000,
    lazy = false,
  },

  {
    "rose-pine/neovim",
    name = "rose-pine",
    priority = 1000,
    lazy = false,
    config = function()
      require("rose-pine").setup({
        disable_background = true,
      })
    end,
  },

  {
    "nvim-telescope/telescope.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
  },
}
EOF

echo "[âœ…] Installation complete."
echo "[ðŸš€] Open Neovim and run :Lazy sync to install all plugins."
echo "[ðŸŽ¨] Use :ThemePicker or :ThemePreview to change themes."
